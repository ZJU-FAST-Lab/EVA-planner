<launch>
  <arg name="x" default="2" />
  <arg name="y" default="2" />
  <arg name="z" default="0.4" />
  <arg name="base_link_height_to_ground" default="0.06349" />
  <!--  -->
  <arg name="yaw" default="0.0" />
  <!-- <arg name="world_filepath" default="$(find jackal_gazebo)/worlds/jackal_race_top_down.world" /> -->

  <!-- if you want to spawn robot at non origin and use mapping packages to publish map to map_frame -->
  <arg name="world_frame" default="map" />
  <arg name="map_frame" default="map_link" />

  <arg name="scan_topic" default="/front/scan"/>
  <arg name="gazebo_odom_topic" default="/gazebo_p3d/odom" />

	<!-- Spawn the World ERL -->
  <include file="$(find erl_models)/launch/spawn_world.launch">
    <!-- <arg name="world" value="fla_warehouse1"/> -->
    <arg name="world" value="simple"/>
    <arg name="world_frame" value="$(arg world_frame)"/>
    <arg name="scale" value="1"/>
    <arg name="gui" value="false"/>
  </include>

  <!-- world to map (map_link generated by hector slam) -->
  <!-- args x y z yaw pitch roll -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="world_map_transformer"
    args="$(arg x) $(arg y) $(arg base_link_height_to_ground) 0 0 0 $(arg world_frame) $(arg map_frame)"/>

  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="idendity_map" args="0 0 0 0 0 0 1 scanmatcher_frame base_link"/> -->

  <!-- Configuration of Jackal which you would like to simulate. See jackal_description for details. -->
  <!-- Spawn Jackal -->
  <include file="$(find jackal_gazebo)/launch/spawn_jackal.launch">
    <arg name="x" value="$(arg x)" />
    <arg name="y" value="$(arg y)" />
    <arg name="z" value="$(arg z)" />
    <arg name="yaw" value="$(arg yaw)" />
    <arg name="config" value="front_laser" />
    <arg name="joystick" value="true" />
    <arg name="keyboard" default="false" />
    <arg name="enable_ekf" default="false" />
  </include>

  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="map_odom_transformer" args="0 0 0 0 0 0 1 map odom"/> -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="idendity_map" args="0 0 0 0 0 0 1 map odom"/> -->

  <!-- complete TF tree, must be consistent with jackal.gazebo p3d setting-->
  <!-- <node pkg="gazebo_p3d_utils" type="p3d_link_tf" name="link_map_to_base_link"  output="screen">
    <remap from="~input" to="$(arg gazebo_odom_topic)"/>
  </node> -->

  <node pkg="gazebo_p3d_utils" type="p3d_link_tf_complex" name="link_local_map_to_base_link"  output="screen">
    <remap from="~input" to="$(arg gazebo_odom_topic)"/>
    <param name="global_map_frame_id" value="$(arg world_frame)"/>
    <param name="local_map_frame_id" value="$(arg map_frame)"/>
  </node>

  <!-- need this to link scanmatcher_frame to base_link -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="idendity_map" args="0 0 0 0 0 0 1 scanmatcher_frame base_link"/> -->

  <!-- slam hector as mapping and localization does not use external odom-->
  <include file="$(find jackal_gazebo)/launch/jackal_hector_map.launch">
    <arg name="scan_topic" value="front/scan" />
    <arg name="map_size" value="1024" />
    <arg name="map_frame" value="$(arg map_frame)" />
  </include>


  <!--  c++ package can reach 50 hz as /front/scan  --> 
  <node pkg="pointcloud_to_laserscan" type="laserscan_to_pointcloud_node" name="scan2pcl_cpp"  output="screen">
    <remap from="scan_in" to="$(arg scan_topic)" />
  </node>

  <!--- Run rviz using config inside package -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find jackal_gazebo)/rviz/test_laser2pcl.rviz" />

</launch>
