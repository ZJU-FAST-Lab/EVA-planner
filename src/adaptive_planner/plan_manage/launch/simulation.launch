<launch>
  <!-- size of map, change the size in x, y, z according to your application -->
  <arg name="map_size_x" value="30.0"/>
  <arg name="map_size_y" value="20.0"/>
  <arg name="map_size_z" value=" 2.1"/>
  <arg name="init_x" value="-14.5"/>
  <arg name="init_y" value="0.0"/>
  <arg name="init_z" value="0.0"/>

  <!-- topic of your odometry such as VIO or LIO -->
  <arg name="odom_topic" value="/visual_slam/odom" />
  
  <node pkg="waypoint_generator" name="waypoint_generator" type="waypoint_generator" output="screen">
    <remap from="~goal"           to="/goal"/>
    <param name="waypoint_type"   value="manual-lonely-waypoint"/>     
  </node>

  <!-- use simulator -->
  <node pkg ="map_generator" name ="random_forest" type ="random_forest" output = "screen">    
    <remap from="~odometry"   to="$(arg odom_topic)"/>    
    <param name="init_state_x"   value="$(arg init_x)"/>
    <param name="init_state_y"   value="$(arg init_y)"/>
    <param name="init_state_z"   value="$(arg init_z)"/>
    <param name="map/x_size"     value="$(arg map_size_x)" />
    <param name="map/y_size"     value="$(arg map_size_y)" />
    <param name="map/z_size"     value="$(arg map_size_z)" />
    <param name="map/resolution" value="0.1"/>
    <param name="map/if_alternate_map" value="false"/>
    
    <param name="ObstacleShape/seed" value="1"/>
    <param name="map/obs_num"    value="40"/>
    <param name="ObstacleShape/lower_rad" value="0.7"/>
    <param name="ObstacleShape/upper_rad" value="0.5"/>
    <param name="ObstacleShape/lower_hei" value="0.0"/>
    <param name="ObstacleShape/upper_hei" value="3.0"/>        

    <param name="map/circle_num" value="10"/>        
    <param name="ObstacleShape/radius_l" value="1.7"/>        
    <param name="ObstacleShape/radius_h" value="1.5"/>        
    <param name="ObstacleShape/z_l" value="0.7"/>        
    <param name="ObstacleShape/z_h" value="0.8"/>        
    <param name="ObstacleShape/theta" value="0.5"/>        

    <param name="sensing/radius" value="5.0"/>        
    <param name="sensing/rate"   value="10.0"/>        
  </node>

  <node pkg="so3_quadrotor_simulator" type="quadrotor_simulator_so3" name="quadrotor_simulator_so3" output="screen">
        <param name="rate/odom" value="200.0"/> 
        <param name="simulator/init_state_x" value="$(arg init_x)"/>
        <param name="simulator/init_state_y" value="$(arg init_y)"/>
        <param name="simulator/init_state_z" value="$(arg init_z)"/>

        <remap from="~odom" to="/visual_slam/odom"/>
        <remap from="~cmd" to="so3_cmd"/>
        <remap from="~force_disturbance" to="force_disturbance"/>    
        <remap from="~moment_disturbance" to="moment_disturbance"/>        
  </node>

  <!-- Quadrotor Controller -->  
   <node pkg="nodelet" type="nodelet" args="standalone so3_control/SO3ControlNodelet" name="so3_control" required="true" output="screen">
     <remap from="~odom"          to="/visual_slam/odom"/>
     <remap from="~position_cmd"  to="/planning/pos_cmd"/>
     <remap from="~motors"        to="motors"/>
     <remap from="~corrections"   to="corrections"/>
     <remap from="~so3_cmd"       to="so3_cmd"/>
     <remap from="~imu"           to="sim/imu"/>

   <rosparam file="$(find so3_control)/config/gains_hummingbird.yaml"/>
     <rosparam file="$(find so3_control)/config/corrections_hummingbird.yaml"/>
     <param name="mass"                   value="0.98"/>
     <param name="use_angle_corrections " value="false"/>
     <param name="use_external_yaw "      value="false"/>
     <param name="gains/rot/z"            value="1.0"/>    
     <param name="gains/ang/z"            value="0.1"/>        
   </node> 

  <node pkg="odom_visualization" name="odom_visualization" type="odom_visualization" output="screen">
        <remap from="~odom" to="/visual_slam/odom"/>
        <param name="color/a" value="1.0"/>    
        <param name="color/r" value="0.0"/>        
        <param name="color/g" value="0.0"/>        
        <param name="color/b" value="1.0"/>       
        <param name="covariance_scale" value="100.0"/>       
        <param name="robot_scale" value="1.0"/>
  </node>

  <!-- Map Info Render -->
  <node pkg="local_sensing_node" type="pcl_render_node" name="pcl_render_node" output="screen">
        <rosparam command="load" file="$(find local_sensing_node)/params/camera.yaml" />
        <param name="sensing_horizon"  value="5.0" />
        <param name="sensing_rate"     value="30.0"/>
        <param name="estimation_rate"  value="30.0"/>

        <param name="map/x_size"     value="$(arg map_size_x)"/>
        <param name="map/y_size"     value="$(arg map_size_y)"/>
        <param name="map/z_size"     value="$(arg map_size_z)"/>

        <remap from="~global_map" to="/map_generator/global_cloud"/>
        <remap from="~odometry"   to="$(arg odom_topic)"/>
  </node>
  
  <!-- main algorithm params -->
  <include file="$(find plan_manage)/launch/planner_sim.xml">

    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>
    <arg name="odometry_topic" value="$(arg odom_topic)"/>

    <!-- camera pose: transform of camera frame in the world frame -->
    <!-- depth topic: depth image, 640x480 by default -->
    <!-- don't set cloud_topic if you already set these ones! -->
    <arg name="camera_pose_topic" value="/pcl_render_node/camera_pose"/>
    <arg name="depth_topic" value="/pcl_render_node/depth"/>

    <!-- topic of point cloud measurement, such as from LIDAR  -->
    <!-- don't set camera pose and depth, if you already set this one! -->
    <!-- <arg name="cloud_topic" value="/map_generator/global_cloud"/> -->
    <arg name="cloud_topic" value="/pcl_render_node/cloud"/>
    
    <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="321.8554382324219"/>
    <arg name="cy" value="241.2396240234375"/>
    <arg name="fx" value="386.02557373046875"/>
    <arg name="fy" value="386.02557373046875"/>
    
    <!-- 1: use 3D Nav Goal to select goal  -->
    <!-- 2: use global waypoints below  -->
    <arg name="flight_type" value="1" />

    <!-- global waypoints -->
    <!-- It generates a piecewise min-snap traj passing all waypoints -->
    <arg name="point_num" value="8" />

    <arg name="point0_x" value="-3.1" />
    <arg name="point0_y" value="-4.95" />
    <arg name="point0_z" value="1.0" />

    <arg name="point1_x" value="3.67" />
    <arg name="point1_y" value="-4.82" />
    <arg name="point1_z" value="1.0" />

    <arg name="point2_x" value="3.81" />
    <arg name="point2_y" value="5.56" />
    <arg name="point2_z" value="1.0" />

    <arg name="point3_x" value="-4.97" />
    <arg name="point3_y" value="5.52" />
    <arg name="point3_z" value="1.0" />

    <arg name="point4_x" value="-7.1" />
    <arg name="point4_y" value="0.28" />
    <arg name="point4_z" value="1.0" />

    <arg name="point5_x" value="1.2" />
    <arg name="point5_y" value="6.5" />
    <arg name="point5_z" value="1.0" />

    <arg name="point6_x" value="-4.6" />
    <arg name="point6_y" value="7.4" />
    <arg name="point6_z" value="1.0" />

    <arg name="point7_x" value="-8.2" />
    <arg name="point7_y" value="1.2" />
    <arg name="point7_z" value="1.0" />
  </include>

</launch>
